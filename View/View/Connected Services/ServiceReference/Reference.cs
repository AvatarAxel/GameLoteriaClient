//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace View.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerDTO", Namespace="http://schemas.datacontract.org/2004/07/Logic")]
    [System.SerializableAttribute()]
    public partial class PlayerDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthdayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CoinField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Birthday {
            get {
                return this.BirthdayField;
            }
            set {
                if ((this.BirthdayField.Equals(value) != true)) {
                    this.BirthdayField = value;
                    this.RaisePropertyChanged("Birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Coin {
            get {
                return this.CoinField;
            }
            set {
                if ((this.CoinField.Equals(value) != true)) {
                    this.CoinField = value;
                    this.RaisePropertyChanged("Coin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameRoundDTO", Namespace="http://schemas.datacontract.org/2004/07/Logic")]
    [System.SerializableAttribute()]
    public partial class GameRoundDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LimitPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PrivateGameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SpeedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VerificationCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Bet {
            get {
                return this.BetField;
            }
            set {
                if ((this.BetField.Equals(value) != true)) {
                    this.BetField = value;
                    this.RaisePropertyChanged("Bet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LimitPlayer {
            get {
                return this.LimitPlayerField;
            }
            set {
                if ((this.LimitPlayerField.Equals(value) != true)) {
                    this.LimitPlayerField = value;
                    this.RaisePropertyChanged("LimitPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PrivateGame {
            get {
                return this.PrivateGameField;
            }
            set {
                if ((this.PrivateGameField.Equals(value) != true)) {
                    this.PrivateGameField = value;
                    this.RaisePropertyChanged("PrivateGame");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Speed {
            get {
                return this.SpeedField;
            }
            set {
                if ((this.SpeedField.Equals(value) != true)) {
                    this.SpeedField = value;
                    this.RaisePropertyChanged("Speed");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VerificationCode {
            get {
                return this.VerificationCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.VerificationCodeField, value) != true)) {
                    this.VerificationCodeField = value;
                    this.RaisePropertyChanged("VerificationCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IAuthenticationService")]
    public interface IAuthenticationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AuthenticationLogin", ReplyAction="http://tempuri.org/IAuthenticationService/AuthenticationLoginResponse")]
        View.ServiceReference.PlayerDTO AuthenticationLogin(string name, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/AuthenticationLogin", ReplyAction="http://tempuri.org/IAuthenticationService/AuthenticationLoginResponse")]
        System.Threading.Tasks.Task<View.ServiceReference.PlayerDTO> AuthenticationLoginAsync(string name, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthenticationServiceChannel : View.ServiceReference.IAuthenticationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationServiceClient : System.ServiceModel.ClientBase<View.ServiceReference.IAuthenticationService>, View.ServiceReference.IAuthenticationService {
        
        public AuthenticationServiceClient() {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public View.ServiceReference.PlayerDTO AuthenticationLogin(string name, string password) {
            return base.Channel.AuthenticationLogin(name, password);
        }
        
        public System.Threading.Tasks.Task<View.ServiceReference.PlayerDTO> AuthenticationLoginAsync(string name, string password) {
            return base.Channel.AuthenticationLoginAsync(name, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IChatService", CallbackContract=typeof(View.ServiceReference.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/JoinChat")]
        void JoinChat(string username, string codeVerification);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/JoinChat")]
        System.Threading.Tasks.Task JoinChatAsync(string username, string codeVerification);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMessage")]
        void SendMessage(string message, string userChat, string codeVerification);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string message, string userChat, string codeVerification);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ExitChat")]
        void ExitChat(string userName, string codeVerification);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ExitChat")]
        System.Threading.Tasks.Task ExitChatAsync(string userName, string codeVerification);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/CreateChat")]
        void CreateChat(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/CreateChat")]
        System.Threading.Tasks.Task CreateChatAsync(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/DeleteChat")]
        void DeleteChat(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/DeleteChat")]
        System.Threading.Tasks.Task DeleteChatAsync(string verificationCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ReciveMessage")]
        void ReciveMessage(string player, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : View.ServiceReference.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<View.ServiceReference.IChatService>, View.ServiceReference.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void JoinChat(string username, string codeVerification) {
            base.Channel.JoinChat(username, codeVerification);
        }
        
        public System.Threading.Tasks.Task JoinChatAsync(string username, string codeVerification) {
            return base.Channel.JoinChatAsync(username, codeVerification);
        }
        
        public void SendMessage(string message, string userChat, string codeVerification) {
            base.Channel.SendMessage(message, userChat, codeVerification);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message, string userChat, string codeVerification) {
            return base.Channel.SendMessageAsync(message, userChat, codeVerification);
        }
        
        public void ExitChat(string userName, string codeVerification) {
            base.Channel.ExitChat(userName, codeVerification);
        }
        
        public System.Threading.Tasks.Task ExitChatAsync(string userName, string codeVerification) {
            return base.Channel.ExitChatAsync(userName, codeVerification);
        }
        
        public void CreateChat(string verificationCode) {
            base.Channel.CreateChat(verificationCode);
        }
        
        public System.Threading.Tasks.Task CreateChatAsync(string verificationCode) {
            return base.Channel.CreateChatAsync(verificationCode);
        }
        
        public void DeleteChat(string verificationCode) {
            base.Channel.DeleteChat(verificationCode);
        }
        
        public System.Threading.Tasks.Task DeleteChatAsync(string verificationCode) {
            return base.Channel.DeleteChatAsync(verificationCode);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IChangePasswordService")]
    public interface IChangePasswordService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangePasswordService/ChangePassword", ReplyAction="http://tempuri.org/IChangePasswordService/ChangePasswordResponse")]
        bool ChangePassword(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangePasswordService/ChangePassword", ReplyAction="http://tempuri.org/IChangePasswordService/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangePasswordService/ExistEmail", ReplyAction="http://tempuri.org/IChangePasswordService/ExistEmailResponse")]
        bool ExistEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangePasswordService/ExistEmail", ReplyAction="http://tempuri.org/IChangePasswordService/ExistEmailResponse")]
        System.Threading.Tasks.Task<bool> ExistEmailAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChangePasswordServiceChannel : View.ServiceReference.IChangePasswordService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangePasswordServiceClient : System.ServiceModel.ClientBase<View.ServiceReference.IChangePasswordService>, View.ServiceReference.IChangePasswordService {
        
        public ChangePasswordServiceClient() {
        }
        
        public ChangePasswordServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChangePasswordServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChangePasswordServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChangePasswordServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ChangePassword(string email, string password) {
            return base.Channel.ChangePassword(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string email, string password) {
            return base.Channel.ChangePasswordAsync(email, password);
        }
        
        public bool ExistEmail(string email) {
            return base.Channel.ExistEmail(email);
        }
        
        public System.Threading.Tasks.Task<bool> ExistEmailAsync(string email) {
            return base.Channel.ExistEmailAsync(email);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IEmailService")]
    public interface IEmailService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailService/ValidationEmail", ReplyAction="http://tempuri.org/IEmailService/ValidationEmailResponse")]
        bool ValidationEmail(string email, string codeVerification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailService/ValidationEmail", ReplyAction="http://tempuri.org/IEmailService/ValidationEmailResponse")]
        System.Threading.Tasks.Task<bool> ValidationEmailAsync(string email, string codeVerification);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmailServiceChannel : View.ServiceReference.IEmailService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmailServiceClient : System.ServiceModel.ClientBase<View.ServiceReference.IEmailService>, View.ServiceReference.IEmailService {
        
        public EmailServiceClient() {
        }
        
        public EmailServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmailServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ValidationEmail(string email, string codeVerification) {
            return base.Channel.ValidationEmail(email, codeVerification);
        }
        
        public System.Threading.Tasks.Task<bool> ValidationEmailAsync(string email, string codeVerification) {
            return base.Channel.ValidationEmailAsync(email, codeVerification);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IUserRegistrationService")]
    public interface IUserRegistrationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRegistrationService/RegistrerUserDataBase", ReplyAction="http://tempuri.org/IUserRegistrationService/RegistrerUserDataBaseResponse")]
        bool RegistrerUserDataBase(View.ServiceReference.PlayerDTO player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRegistrationService/RegistrerUserDataBase", ReplyAction="http://tempuri.org/IUserRegistrationService/RegistrerUserDataBaseResponse")]
        System.Threading.Tasks.Task<bool> RegistrerUserDataBaseAsync(View.ServiceReference.PlayerDTO player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRegistrationService/ValidationEmailDataBase", ReplyAction="http://tempuri.org/IUserRegistrationService/ValidationEmailDataBaseResponse")]
        bool ValidationEmailDataBase(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRegistrationService/ValidationEmailDataBase", ReplyAction="http://tempuri.org/IUserRegistrationService/ValidationEmailDataBaseResponse")]
        System.Threading.Tasks.Task<bool> ValidationEmailDataBaseAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRegistrationService/ValidationUsernameDataBase", ReplyAction="http://tempuri.org/IUserRegistrationService/ValidationUsernameDataBaseResponse")]
        bool ValidationUsernameDataBase(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserRegistrationService/ValidationUsernameDataBase", ReplyAction="http://tempuri.org/IUserRegistrationService/ValidationUsernameDataBaseResponse")]
        System.Threading.Tasks.Task<bool> ValidationUsernameDataBaseAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserRegistrationServiceChannel : View.ServiceReference.IUserRegistrationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserRegistrationServiceClient : System.ServiceModel.ClientBase<View.ServiceReference.IUserRegistrationService>, View.ServiceReference.IUserRegistrationService {
        
        public UserRegistrationServiceClient() {
        }
        
        public UserRegistrationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserRegistrationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserRegistrationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserRegistrationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool RegistrerUserDataBase(View.ServiceReference.PlayerDTO player) {
            return base.Channel.RegistrerUserDataBase(player);
        }
        
        public System.Threading.Tasks.Task<bool> RegistrerUserDataBaseAsync(View.ServiceReference.PlayerDTO player) {
            return base.Channel.RegistrerUserDataBaseAsync(player);
        }
        
        public bool ValidationEmailDataBase(string email) {
            return base.Channel.ValidationEmailDataBase(email);
        }
        
        public System.Threading.Tasks.Task<bool> ValidationEmailDataBaseAsync(string email) {
            return base.Channel.ValidationEmailDataBaseAsync(email);
        }
        
        public bool ValidationUsernameDataBase(string username) {
            return base.Channel.ValidationUsernameDataBase(username);
        }
        
        public System.Threading.Tasks.Task<bool> ValidationUsernameDataBaseAsync(string username) {
            return base.Channel.ValidationUsernameDataBaseAsync(username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IJoinGameService")]
    public interface IJoinGameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinGameService/ResponseCodeExist", ReplyAction="http://tempuri.org/IJoinGameService/ResponseCodeExistResponse")]
        bool ResponseCodeExist(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinGameService/ResponseCodeExist", ReplyAction="http://tempuri.org/IJoinGameService/ResponseCodeExistResponse")]
        System.Threading.Tasks.Task<bool> ResponseCodeExistAsync(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinGameService/ResponseCompleteLobby", ReplyAction="http://tempuri.org/IJoinGameService/ResponseCompleteLobbyResponse")]
        bool ResponseCompleteLobby(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinGameService/ResponseCompleteLobby", ReplyAction="http://tempuri.org/IJoinGameService/ResponseCompleteLobbyResponse")]
        System.Threading.Tasks.Task<bool> ResponseCompleteLobbyAsync(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinGameService/ValidateCoinsUnregistered", ReplyAction="http://tempuri.org/IJoinGameService/ValidateCoinsUnregisteredResponse")]
        bool ValidateCoinsUnregistered(int coins, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinGameService/ValidateCoinsUnregistered", ReplyAction="http://tempuri.org/IJoinGameService/ValidateCoinsUnregisteredResponse")]
        System.Threading.Tasks.Task<bool> ValidateCoinsUnregisteredAsync(int coins, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinGameService/ValidateCoinsRegistered", ReplyAction="http://tempuri.org/IJoinGameService/ValidateCoinsRegisteredResponse")]
        bool ValidateCoinsRegistered(string username, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinGameService/ValidateCoinsRegistered", ReplyAction="http://tempuri.org/IJoinGameService/ValidateCoinsRegisteredResponse")]
        System.Threading.Tasks.Task<bool> ValidateCoinsRegisteredAsync(string username, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinGameService/ResponseUsernameExist", ReplyAction="http://tempuri.org/IJoinGameService/ResponseUsernameExistResponse")]
        bool ResponseUsernameExist(string verificationCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IJoinGameService/ResponseUsernameExist", ReplyAction="http://tempuri.org/IJoinGameService/ResponseUsernameExistResponse")]
        System.Threading.Tasks.Task<bool> ResponseUsernameExistAsync(string verificationCode, string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IJoinGameServiceChannel : View.ServiceReference.IJoinGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JoinGameServiceClient : System.ServiceModel.ClientBase<View.ServiceReference.IJoinGameService>, View.ServiceReference.IJoinGameService {
        
        public JoinGameServiceClient() {
        }
        
        public JoinGameServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public JoinGameServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JoinGameServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public JoinGameServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ResponseCodeExist(string verificationCode) {
            return base.Channel.ResponseCodeExist(verificationCode);
        }
        
        public System.Threading.Tasks.Task<bool> ResponseCodeExistAsync(string verificationCode) {
            return base.Channel.ResponseCodeExistAsync(verificationCode);
        }
        
        public bool ResponseCompleteLobby(string verificationCode) {
            return base.Channel.ResponseCompleteLobby(verificationCode);
        }
        
        public System.Threading.Tasks.Task<bool> ResponseCompleteLobbyAsync(string verificationCode) {
            return base.Channel.ResponseCompleteLobbyAsync(verificationCode);
        }
        
        public bool ValidateCoinsUnregistered(int coins, string verificationCode) {
            return base.Channel.ValidateCoinsUnregistered(coins, verificationCode);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateCoinsUnregisteredAsync(int coins, string verificationCode) {
            return base.Channel.ValidateCoinsUnregisteredAsync(coins, verificationCode);
        }
        
        public bool ValidateCoinsRegistered(string username, string verificationCode) {
            return base.Channel.ValidateCoinsRegistered(username, verificationCode);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateCoinsRegisteredAsync(string username, string verificationCode) {
            return base.Channel.ValidateCoinsRegisteredAsync(username, verificationCode);
        }
        
        public bool ResponseUsernameExist(string verificationCode, string username) {
            return base.Channel.ResponseUsernameExist(verificationCode, username);
        }
        
        public System.Threading.Tasks.Task<bool> ResponseUsernameExistAsync(string verificationCode, string username) {
            return base.Channel.ResponseUsernameExistAsync(verificationCode, username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IGameService", CallbackContract=typeof(View.ServiceReference.IGameServiceCallback))]
    public interface IGameService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/JoinGame")]
        void JoinGame(string username, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/JoinGame")]
        System.Threading.Tasks.Task JoinGameAsync(string username, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ExitGame")]
        void ExitGame(string username, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ExitGame")]
        System.Threading.Tasks.Task ExitGameAsync(string username, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/CreateGame")]
        void CreateGame(View.ServiceReference.GameRoundDTO game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/CreateGame")]
        System.Threading.Tasks.Task CreateGameAsync(View.ServiceReference.GameRoundDTO game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/EliminateGame")]
        void EliminateGame(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/EliminateGame")]
        System.Threading.Tasks.Task EliminateGameAsync(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SendNextHostGame")]
        void SendNextHostGame(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SendNextHostGame")]
        System.Threading.Tasks.Task SendNextHostGameAsync(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/GoToGame")]
        void GoToGame(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/GoToGame")]
        System.Threading.Tasks.Task GoToGameAsync(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/UpdateTotalPlayers")]
        void UpdateTotalPlayers(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/UpdateTotalPlayers")]
        System.Threading.Tasks.Task UpdateTotalPlayersAsync(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/UpdateBetCoins")]
        void UpdateBetCoins(string username, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/UpdateBetCoins")]
        System.Threading.Tasks.Task UpdateBetCoinsAsync(string username, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/BanPlayer")]
        void BanPlayer(string verificationCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/BanPlayer")]
        System.Threading.Tasks.Task BanPlayerAsync(string verificationCode, string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ResponseTotalPlayers")]
        void ResponseTotalPlayers(int totalPlayers);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SendNextHostGameResponse")]
        void SendNextHostGameResponse(bool status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/GoToPlay")]
        void GoToPlay(bool status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/UpdateBetCoinsResponse")]
        void UpdateBetCoinsResponse(int coins, int bet);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/GetListPlayer")]
        void GetListPlayer(string[] PlayerLobby);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/BanPlayerResponse")]
        void BanPlayerResponse(bool status);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceChannel : View.ServiceReference.IGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServiceClient : System.ServiceModel.DuplexClientBase<View.ServiceReference.IGameService>, View.ServiceReference.IGameService {
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void JoinGame(string username, string verificationCode) {
            base.Channel.JoinGame(username, verificationCode);
        }
        
        public System.Threading.Tasks.Task JoinGameAsync(string username, string verificationCode) {
            return base.Channel.JoinGameAsync(username, verificationCode);
        }
        
        public void ExitGame(string username, string verificationCode) {
            base.Channel.ExitGame(username, verificationCode);
        }
        
        public System.Threading.Tasks.Task ExitGameAsync(string username, string verificationCode) {
            return base.Channel.ExitGameAsync(username, verificationCode);
        }
        
        public void CreateGame(View.ServiceReference.GameRoundDTO game) {
            base.Channel.CreateGame(game);
        }
        
        public System.Threading.Tasks.Task CreateGameAsync(View.ServiceReference.GameRoundDTO game) {
            return base.Channel.CreateGameAsync(game);
        }
        
        public void EliminateGame(string verificationCode) {
            base.Channel.EliminateGame(verificationCode);
        }
        
        public System.Threading.Tasks.Task EliminateGameAsync(string verificationCode) {
            return base.Channel.EliminateGameAsync(verificationCode);
        }
        
        public void SendNextHostGame(string verificationCode) {
            base.Channel.SendNextHostGame(verificationCode);
        }
        
        public System.Threading.Tasks.Task SendNextHostGameAsync(string verificationCode) {
            return base.Channel.SendNextHostGameAsync(verificationCode);
        }
        
        public void GoToGame(string verificationCode) {
            base.Channel.GoToGame(verificationCode);
        }
        
        public System.Threading.Tasks.Task GoToGameAsync(string verificationCode) {
            return base.Channel.GoToGameAsync(verificationCode);
        }
        
        public void UpdateTotalPlayers(string verificationCode) {
            base.Channel.UpdateTotalPlayers(verificationCode);
        }
        
        public System.Threading.Tasks.Task UpdateTotalPlayersAsync(string verificationCode) {
            return base.Channel.UpdateTotalPlayersAsync(verificationCode);
        }
        
        public void UpdateBetCoins(string username, string verificationCode) {
            base.Channel.UpdateBetCoins(username, verificationCode);
        }
        
        public System.Threading.Tasks.Task UpdateBetCoinsAsync(string username, string verificationCode) {
            return base.Channel.UpdateBetCoinsAsync(username, verificationCode);
        }
        
        public void BanPlayer(string verificationCode, string username) {
            base.Channel.BanPlayer(verificationCode, username);
        }
        
        public System.Threading.Tasks.Task BanPlayerAsync(string verificationCode, string username) {
            return base.Channel.BanPlayerAsync(verificationCode, username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IChangeUsernameService")]
    public interface IChangeUsernameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangeUsernameService/ChangeUsername", ReplyAction="http://tempuri.org/IChangeUsernameService/ChangeUsernameResponse")]
        bool ChangeUsername(string email, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangeUsernameService/ChangeUsername", ReplyAction="http://tempuri.org/IChangeUsernameService/ChangeUsernameResponse")]
        System.Threading.Tasks.Task<bool> ChangeUsernameAsync(string email, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangeUsernameService/ValidateAvailabilityUsername", ReplyAction="http://tempuri.org/IChangeUsernameService/ValidateAvailabilityUsernameResponse")]
        bool ValidateAvailabilityUsername(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChangeUsernameService/ValidateAvailabilityUsername", ReplyAction="http://tempuri.org/IChangeUsernameService/ValidateAvailabilityUsernameResponse")]
        System.Threading.Tasks.Task<bool> ValidateAvailabilityUsernameAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChangeUsernameServiceChannel : View.ServiceReference.IChangeUsernameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeUsernameServiceClient : System.ServiceModel.ClientBase<View.ServiceReference.IChangeUsernameService>, View.ServiceReference.IChangeUsernameService {
        
        public ChangeUsernameServiceClient() {
        }
        
        public ChangeUsernameServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChangeUsernameServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChangeUsernameServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChangeUsernameServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ChangeUsername(string email, string username) {
            return base.Channel.ChangeUsername(email, username);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeUsernameAsync(string email, string username) {
            return base.Channel.ChangeUsernameAsync(email, username);
        }
        
        public bool ValidateAvailabilityUsername(string username) {
            return base.Channel.ValidateAvailabilityUsername(username);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateAvailabilityUsernameAsync(string username) {
            return base.Channel.ValidateAvailabilityUsernameAsync(username);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ILoteriaService", CallbackContract=typeof(View.ServiceReference.ILoteriaServiceCallback))]
    public interface ILoteriaService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/CreateLoteria")]
        void CreateLoteria(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/CreateLoteria")]
        System.Threading.Tasks.Task CreateLoteriaAsync(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/DeleteLoteria")]
        void DeleteLoteria(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/DeleteLoteria")]
        System.Threading.Tasks.Task DeleteLoteriaAsync(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/JoinLoteria")]
        void JoinLoteria(string username, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/JoinLoteria")]
        System.Threading.Tasks.Task JoinLoteriaAsync(string username, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/ExitLoteria")]
        void ExitLoteria(string username, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/ExitLoteria")]
        System.Threading.Tasks.Task ExitLoteriaAsync(string username, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/ReciveWinner")]
        void ReciveWinner(string username, string verificationCode, int totalCoins);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/ReciveWinner")]
        System.Threading.Tasks.Task ReciveWinnerAsync(string username, string verificationCode, int totalCoins);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/StartGameLoteria")]
        void StartGameLoteria(string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/StartGameLoteria")]
        System.Threading.Tasks.Task StartGameLoteriaAsync(string verificationCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoteriaServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/SendCard")]
        void SendCard(int idCard);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILoteriaService/SendWinner")]
        void SendWinner(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoteriaServiceChannel : View.ServiceReference.ILoteriaService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoteriaServiceClient : System.ServiceModel.DuplexClientBase<View.ServiceReference.ILoteriaService>, View.ServiceReference.ILoteriaService {
        
        public LoteriaServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LoteriaServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LoteriaServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LoteriaServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LoteriaServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void CreateLoteria(string verificationCode) {
            base.Channel.CreateLoteria(verificationCode);
        }
        
        public System.Threading.Tasks.Task CreateLoteriaAsync(string verificationCode) {
            return base.Channel.CreateLoteriaAsync(verificationCode);
        }
        
        public void DeleteLoteria(string verificationCode) {
            base.Channel.DeleteLoteria(verificationCode);
        }
        
        public System.Threading.Tasks.Task DeleteLoteriaAsync(string verificationCode) {
            return base.Channel.DeleteLoteriaAsync(verificationCode);
        }
        
        public void JoinLoteria(string username, string verificationCode) {
            base.Channel.JoinLoteria(username, verificationCode);
        }
        
        public System.Threading.Tasks.Task JoinLoteriaAsync(string username, string verificationCode) {
            return base.Channel.JoinLoteriaAsync(username, verificationCode);
        }
        
        public void ExitLoteria(string username, string verificationCode) {
            base.Channel.ExitLoteria(username, verificationCode);
        }
        
        public System.Threading.Tasks.Task ExitLoteriaAsync(string username, string verificationCode) {
            return base.Channel.ExitLoteriaAsync(username, verificationCode);
        }
        
        public void ReciveWinner(string username, string verificationCode, int totalCoins) {
            base.Channel.ReciveWinner(username, verificationCode, totalCoins);
        }
        
        public System.Threading.Tasks.Task ReciveWinnerAsync(string username, string verificationCode, int totalCoins) {
            return base.Channel.ReciveWinnerAsync(username, verificationCode, totalCoins);
        }
        
        public void StartGameLoteria(string verificationCode) {
            base.Channel.StartGameLoteria(verificationCode);
        }
        
        public System.Threading.Tasks.Task StartGameLoteriaAsync(string verificationCode) {
            return base.Channel.StartGameLoteriaAsync(verificationCode);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IFriendListService", CallbackContract=typeof(View.ServiceReference.IFriendListServiceCallback))]
    public interface IFriendListService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/VerificationAreFriends", ReplyAction="http://tempuri.org/IFriendListService/VerificationAreFriendsResponse")]
        bool VerificationAreFriends(string usernameSender, string usernameDestiner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/VerificationAreFriends", ReplyAction="http://tempuri.org/IFriendListService/VerificationAreFriendsResponse")]
        System.Threading.Tasks.Task<bool> VerificationAreFriendsAsync(string usernameSender, string usernameDestiner);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/CheckNumberFriends", ReplyAction="http://tempuri.org/IFriendListService/CheckNumberFriendsResponse")]
        int CheckNumberFriends(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendListService/CheckNumberFriends", ReplyAction="http://tempuri.org/IFriendListService/CheckNumberFriendsResponse")]
        System.Threading.Tasks.Task<int> CheckNumberFriendsAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendListService/SendInvitation")]
        void SendInvitation(string verificationCode, string usernameSender, string usernameRecipient);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendListService/SendInvitation")]
        System.Threading.Tasks.Task SendInvitationAsync(string verificationCode, string usernameSender, string usernameRecipient);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendListService/JoinFriend")]
        void JoinFriend(string verificationCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendListService/JoinFriend")]
        System.Threading.Tasks.Task JoinFriendAsync(string verificationCode, string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendListService/AddFriends")]
        void AddFriends(string usernameSender, string usernameDestination, string verificationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendListService/AddFriends")]
        System.Threading.Tasks.Task AddFriendsAsync(string usernameSender, string usernameDestination, string verificationCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendListServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendListService/ReciveInvitation")]
        void ReciveInvitation(bool status, string usernameSender);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendListService/AddFriendResponse")]
        void AddFriendResponse(bool status);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendListServiceChannel : View.ServiceReference.IFriendListService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendListServiceClient : System.ServiceModel.DuplexClientBase<View.ServiceReference.IFriendListService>, View.ServiceReference.IFriendListService {
        
        public FriendListServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FriendListServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FriendListServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendListServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendListServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool VerificationAreFriends(string usernameSender, string usernameDestiner) {
            return base.Channel.VerificationAreFriends(usernameSender, usernameDestiner);
        }
        
        public System.Threading.Tasks.Task<bool> VerificationAreFriendsAsync(string usernameSender, string usernameDestiner) {
            return base.Channel.VerificationAreFriendsAsync(usernameSender, usernameDestiner);
        }
        
        public int CheckNumberFriends(string email) {
            return base.Channel.CheckNumberFriends(email);
        }
        
        public System.Threading.Tasks.Task<int> CheckNumberFriendsAsync(string email) {
            return base.Channel.CheckNumberFriendsAsync(email);
        }
        
        public void SendInvitation(string verificationCode, string usernameSender, string usernameRecipient) {
            base.Channel.SendInvitation(verificationCode, usernameSender, usernameRecipient);
        }
        
        public System.Threading.Tasks.Task SendInvitationAsync(string verificationCode, string usernameSender, string usernameRecipient) {
            return base.Channel.SendInvitationAsync(verificationCode, usernameSender, usernameRecipient);
        }
        
        public void JoinFriend(string verificationCode, string username) {
            base.Channel.JoinFriend(verificationCode, username);
        }
        
        public System.Threading.Tasks.Task JoinFriendAsync(string verificationCode, string username) {
            return base.Channel.JoinFriendAsync(verificationCode, username);
        }
        
        public void AddFriends(string usernameSender, string usernameDestination, string verificationCode) {
            base.Channel.AddFriends(usernameSender, usernameDestination, verificationCode);
        }
        
        public System.Threading.Tasks.Task AddFriendsAsync(string usernameSender, string usernameDestination, string verificationCode) {
            return base.Channel.AddFriendsAsync(usernameSender, usernameDestination, verificationCode);
        }
    }
}
